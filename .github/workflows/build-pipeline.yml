name: Build and test

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

    # Allows us to run the workflow manually from the Actions tab
    workflow_dispatch:

jobs:
    compile-nano-s:
        name: Compile for Nano S
        runs-on: ubuntu-latest

        container: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

        steps:
            - uses: actions/checkout@v5
              with:
                  submodules: 'recursive'
            - name: Build
              run: |
                  make clean
                  BOLOS_SDK=$NANOS_SDK make
                  mv bin/app.elf concordium_nanos.elf

            - name: Upload binary
              uses: actions/upload-artifact@v4
              with:
                name: nanos
                path: ./concordium_nanos.elf

    compile-nano-s-plus:
        name: Compile for Nano S Plus
        runs-on: ubuntu-latest

        container: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

        steps:
            - uses: actions/checkout@v5
              with:
                  submodules: 'recursive'

            - name: Build
              run: |
                  make clean
                  BOLOS_SDK=$NANOSP_SDK make
                  mv bin/app.elf concordium_nanosplus.elf

            - name: Upload binary
              uses: actions/upload-artifact@v4
              with:
                name: nanosplus
                path: ./concordium_nanosplus.elf

    compile-nano-x:
        name: Compile for Nano X
        runs-on: ubuntu-latest

        container: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

        steps:
            - uses: actions/checkout@v5
              with:
                  submodules: 'recursive'
            - name: Build
              run: |
                  make clean
                  BOLOS_SDK=$NANOX_SDK make
                  mv bin/app.elf concordium_nanox.elf

            - name: Upload binary
              uses: actions/upload-artifact@v4
              with:
                name: nanox
                path: ./concordium_nanox.elf

    compile-governance-nano-s:
        name: Compile Governance app for Nano S
        runs-on: ubuntu-latest

        container: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

        steps:
            - uses: actions/checkout@v5
              with:
                  submodules: 'recursive'
            - name: Build
              run: |
                  cd governance-app
                  make clean
                  BOLOS_SDK=$NANOS_SDK make
                  mv bin/app.elf ccdGovernance_nanos.elf

            - name: Upload binary
              uses: actions/upload-artifact@v4
              with:
                name: governance-nanos
                path: ./governance-app/ccdGovernance_nanos.elf

    compile-governance-nano-s-plus:
        name: Compile Governance app for Nano S Plus
        runs-on: ubuntu-latest

        container: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

        steps:
            - uses: actions/checkout@v5
              with:
                  submodules: 'recursive'
            - name: Build
              run: |
                  cd governance-app
                  make clean
                  BOLOS_SDK=$NANOSP_SDK make
                  mv bin/app.elf ccdGovernance_nanosplus.elf

            - name: Upload binary
              uses: actions/upload-artifact@v4
              with:
                name: governance-nanosplus
                path: ./governance-app/ccdGovernance_nanosplus.elf

    scan-build:
        name: Run Clang Static Analyzer
        runs-on: ubuntu-latest

        container: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

        steps:
            - uses: actions/checkout@v5
              with:
                  submodules: 'recursive'

            - name: Clang Static Analyzer
              run: |
                  make clean
                  scan-build --use-cc=clang -analyze-headers -enable-checker security -enable-checker unix -enable-checker valist -o scan-build --status-bugs make default

    lint:
        name: Lint
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v5

            - name: Lint
              uses: DoozyX/clang-format-lint-action@v0.15
              with:
                source: './src ./unit_tests'
                extensions: 'c,h'
                clangFormatVersion: 15
                style: file
                inplace: false

    e2e-tests:
        name: End to end tests
        needs: [compile-nano-s, compile-nano-s-plus, compile-nano-x, compile-governance-nano-s]
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v5
              with:
                submodules: 'recursive'
            - run: sudo apt-get update -y && sudo apt-get install -y libusb-1.0.0 libudev-dev

            - uses: actions/setup-node@v4
              with:
                node-version: "22"

            - name: Setup dependencies
              run: |
                cd tests && yarn

            - name: Create directory for binaries
              run: |
                mkdir tests/bin

            - name: Download binaries
              uses: actions/download-artifact@v5
              with:
                path: tests/bin

            - name: Run tests
              run: |
                cd tests && yarn test

            - name: Upload snapshots
              if: always()
              uses: actions/upload-artifact@v4
              with:
                name: snapshots
                path: ./tests/snapshots-tmp

    run_unit_test:
      name: Unit test
      runs-on: ubuntu-latest

      container:
        image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

      steps:
          - name: Clone
            uses: actions/checkout@v5

          - name: Build unit tests
            run: |
              cd unit_tests/
              cmake -Bbuild -H. && make -C build

          - name: Run unit tests
            env:
              CTEST_OUTPUT_ON_FAILURE: 1
            run: |
              cd unit_tests/
              make -C build test
                
    # The point of this job is to make it easy to add protection rules that require all status checks to pass.
    results:
      if: ${{ always() }}
      runs-on: ubuntu-latest
      name: Workflow result
      needs: [compile-nano-s, compile-nano-s-plus, compile-nano-x, compile-governance-nano-s, compile-governance-nano-s-plus, scan-build, run_unit_test, lint, e2e-tests]
      steps:
        - run: exit 1
          # see https://stackoverflow.com/a/67532120/4907315
          if: >-
            ${{
                 contains(needs.*.result, 'failure')
              || contains(needs.*.result, 'cancelled')
            }}
